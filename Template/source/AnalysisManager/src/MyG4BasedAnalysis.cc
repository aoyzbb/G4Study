//*********************************************
//  This is auto generated by G4gen 0.6
//                                  author:Qian
//

#include "MyG4BasedAnalysis.hh"
#include "g4root.hh"
#include "Verbose.hh"

#include "G4AntiNeutrinoE.hh"
#include "G4AntiNeutrinoMu.hh"
#include "G4AntiNeutrinoTau.hh"

#include "MyDetectorConstruction.hh"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#include "TH1F.h"
#pragma GCC diagnostic pop

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

MyG4BasedAnalysis::MyG4BasedAnalysis()
{
    SetFileName("g4output.root");

    //-------
    //#ANALYSIS 1. 初始化变量

    fEDep = 0;

    fTrkLen = 0;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

MyG4BasedAnalysis::~MyG4BasedAnalysis()
{
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void MyG4BasedAnalysis::BeginOfRunAction()
{
    if (!active)
        return;

    if (verbose)
        G4cout << "====>MyG4BasedAnalysis::BeginOfRunAction()" << G4endl;

    auto analysisManager = G4AnalysisManager::Instance();

    // Default settings
    analysisManager->SetNtupleMerging(true);
    // Note: merging ntuples is available only with Root output

    analysisManager->SetVerboseLevel(1);
    analysisManager->OpenFile(fFileName);

    //-------
    //#ANALYSIS 2. 定义Ntuple结构

    // Creating 1D histograms
    //analysisManager->SetFirstHistoId(1);
    //analysisManager->CreateH1("phEng", "photon energy", 50, 0., 100); // h1 Id = 0

    // Creating 2D histograms
    //analysisManager->CreateH2("HitOnAnode", "Cherenkov photon hits on the anodes", // h2 Id = 0
    //                          50, -1000., 1000, 50, -1000., 1000.);

    // Creating ntuple
    //
    analysisManager->SetFirstNtupleId(1);

    analysisManager->CreateNtuple("Charged", "Hits"); // ntuple Id = 1
    analysisManager->CreateNtupleDColumn("X");
    analysisManager->CreateNtupleDColumn("Y");
    analysisManager->CreateNtupleDColumn("Z");
    analysisManager->CreateNtupleDColumn("PX");
    analysisManager->CreateNtupleDColumn("PY");
    analysisManager->CreateNtupleDColumn("PZ");
    analysisManager->CreateNtupleDColumn("Process");
    analysisManager->CreateNtupleDColumn("ProcessSub");
    analysisManager->CreateNtupleDColumn("PID");
    analysisManager->CreateNtupleDColumn("ParentID");

    analysisManager->CreateNtuple("Neutral", "Hits"); // ntuple Id = 2
    analysisManager->CreateNtupleDColumn("X");
    analysisManager->CreateNtupleDColumn("Y");
    analysisManager->CreateNtupleDColumn("Z");
    analysisManager->CreateNtupleDColumn("PX");
    analysisManager->CreateNtupleDColumn("PY");
    analysisManager->CreateNtupleDColumn("PZ");
    analysisManager->CreateNtupleDColumn("PID");
    analysisManager->CreateNtupleDColumn("ParentID");

    analysisManager->CreateNtuple("PTrack", "Hits"); // ntuple Id = 3
    analysisManager->CreateNtupleDColumn("TrkLeng");


    analysisManager->FinishNtuple();

    return;
}

void MyG4BasedAnalysis::EndOfRunAction()
{
    if (!active)
        return;

    if (verbose)
        G4cout << "====>MyG4BasedAnalysis::EndOfRunAction()" << G4endl;

    //-------
    //#ANALYSIS 6. 在Run结束的时候将ntuple保存到文件

    auto analysisManager = G4AnalysisManager::Instance();
    analysisManager->Write();
    analysisManager->CloseFile();

    return;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void MyG4BasedAnalysis::BeginOfEventAction(const G4Event *)
{
    if (!active)
        return;

    if (verbose)
        G4cout << "====>MyG4BasedAnalysis::BeginOfEventAction()" << G4endl;

    //-------
    //#ANALYSIS 3. 初始化Event开始的参数
    fEDep = 0;

    fTrkLen = 0;

    return;
}

void MyG4BasedAnalysis::EndOfEventAction(const G4Event *)
{
    if (!active)
        return;

    if (verbose)
        G4cout << "====>MyG4BasedAnalysis::EndOfEventAction()" << G4endl;

    //-------
    //#ANALYSIS 5. 在Event结束的时候将数据保存到ntuple

    auto analysisManager = G4AnalysisManager::Instance();
    analysisManager->FillNtupleDColumn(3, 0, fTrkLen);
    analysisManager->AddNtupleRow(3);

    return;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
G4ClassificationOfNewTrack MyG4BasedAnalysis::ClassifyNewTrack(const G4Track *aTrack)
{
    if (!active)
        return fUrgent;

    if (verbose)
        G4cout << "====>MyG4BasedAnalysis::ClassifyNewTrack()" << G4endl;

    //-------
    //#ANALYSIS 4.1 在生成新Track的时候保存相应数据

    //if (aTrack->GetDefinition() == G4Gamma::Gamma()) 
    //    return fKill;

    if (aTrack->GetDefinition() == G4AntiNeutrinoE::AntiNeutrinoE()) 
        return fKill;
    
    if (aTrack->GetDefinition() == G4AntiNeutrinoMu::AntiNeutrinoMu()) 
        return fKill;

    if (aTrack->GetDefinition() == G4AntiNeutrinoTau::AntiNeutrinoTau()) 
        return fKill;
    
    return fUrgent;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
void MyG4BasedAnalysis::TrackingAction(const G4Track *)
{
    if (!active)
        return;

    if (verbose)
        G4cout << "====>MyG4BasedAnalysis::TrackingAction()" << G4endl;

    //-------
    //#ANALYSIS 4.2 在Tracking的时候保存相应数据

    return;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
void MyG4BasedAnalysis::SteppingAction(const G4Step *aStep)
{
    if (!active)
        return;

    if (verbose)
        G4cout << "====>MyG4BasedAnalysis::SteppingAction()" << G4endl;

    //-------
    //#ANALYSIS 4.3 在Steppinging的时候保存相应数据

    //---
    //1. 相关参数的获取

    //1.1 Track的相关参数
    const G4Track *aTrack = aStep->GetTrack();
    G4int parentID = aTrack->GetParentID();
    G4int pdgID = aTrack->GetDefinition()->GetPDGEncoding();

    //以下是G4Track常见的一些参数获取方法
    {
        /*
        G4int iStep = aTrack->GetCurrentStepNumber();
        G4int trackID = aTrack->GetTrackID();
        G4int parentID = aTrack->GetParentID();
        G4int pdgID = aTrack->GetDefinition()->GetPDGEncoding();
        G4String pdgName = aTrack->GetDefinition()->GetParticleName();
        G4cout << "-->" << iStep << ": tid=" << trackID << " " << pdgName << "(" << pdgID << ") parentID=" << parentID << G4endl;

        G4double energy = aTrack->GetKineticEnergy(); // kinetic energy at current step
        G4double engtot = aTrack->GetTotalEnergy();   // total energy (including m0)
        G4double velocity = aTrack->GetVelocity();    // mm/s
        G4ThreeVector moment = aTrack->GetMomentum();
        G4ThreeVector momDir = aTrack->GetMomentumDirection(); //unit vector
        G4ThreeVector polar = aTrack->GetPolarization();
        G4cout << "-->" << energy << " " << engtot << " " << velocity << " " << moment << " " << momDir << G4endl;

        //two different ways to get the process name
        G4String crtName = (parentID != 0) ? aTrack->GetCreatorModelName() : "none";
        G4String proName = (parentID != 0) ? aTrack->GetCreatorProcess()->GetProcessName() : "none";
        G4cout << "-->" << crtName << " " << proName << G4endl;

        G4ThreeVector trkPos = aTrack->GetPosition(); //current position of this track at the postStepPoint of this step
        G4double trkLen = aTrack->GetTrackLength(); //current track-length of this track at this postStepPoint of this step
        G4double gtime = aTrack->GetGlobalTime();
        G4double ltime = aTrack->GetLocalTime();
        G4double ptime = aTrack->GetProperTime();
        G4cout << "-->trkPos=" << trkPos << " " << trkLen << " " << gtime << " " << ltime << " " << ptime << G4endl;
        */
    }

    //1.2 Step的相关参数
    G4StepPoint *preStepPoint = aStep->GetPreStepPoint();
    G4StepPoint *postStepPoint = aStep->GetPostStepPoint();

    //以下是G4Step常见的一些参数获取方法
    {
        /*
        G4StepPoint *preStepPoint = aStep->GetPreStepPoint();
        G4StepPoint *postStepPoint = aStep->GetPostStepPoint();

        G4double stepLen = aStep->GetStepLength(); //the same as aTrack->GetTrackLength()
        G4double engDep = aStep->GetTotalEnergyDeposit(); // energy deposit inside this step
        G4double engDep2 = aStep->GetNonIonizingEnergyDeposit();
        G4bool isFirst = aStep->IsFirstStepInVolume();
        G4bool isLast = aStep->IsLastStepInVolume();
        G4cout << "-->" << stepLen << " " << engDep << " " << engDep2 << " " << isFirst << " " << isLast << G4endl;

        G4ThreeVector prePos = preStepPoint->GetPosition();
        G4double preGtime = preStepPoint->GetGlobalTime();
        G4double preLtime = preStepPoint->GetLocalTime();
        G4double prePtime = preStepPoint->GetProperTime();
        G4cout << "-->prePos=" << prePos << " " << preGtime << " " << preLtime << " " << prePtime << G4endl;
        G4ThreeVector postPos = postStepPoint->GetPosition(); // same as the information get from aTrack
        G4double postGtime = postStepPoint->GetGlobalTime();
        G4double postLtime = postStepPoint->GetLocalTime();
        G4double postPtime = postStepPoint->GetProperTime();
        G4cout << "-->postPos=" << postPos << " " << postGtime << " " << postLtime << " " << postPtime << G4endl;
        
        G4ThreeVector preMomDir = preStepPoint->GetMomentumDirection();
        G4ThreeVector preMomtum = preStepPoint->GetMomentum();
        G4double preEngTot = preStepPoint->GetTotalEnergy();
        G4double preEng = preStepPoint->GetKineticEnergy();
        G4double preV = preStepPoint->GetVelocity();
        G4double preBeta = preStepPoint->GetBeta();
        G4double preGamma = preStepPoint->GetGamma();

        G4ThreeVector postMomDir = postStepPoint->GetMomentumDirection();
        G4ThreeVector postMomtum = postStepPoint->GetMomentum();
        G4double postEngTot = postStepPoint->GetTotalEnergy();
        G4double postEng = postStepPoint->GetKineticEnergy();
        G4double postV = postStepPoint->GetVelocity();
        G4double postBeta = postStepPoint->GetBeta();
        G4double postGamma = postStepPoint->GetGamma();
        
        G4double mass = preStepPoint->GetMass();
        G4double charge = preStepPoint->GetCharge();
        G4double magmom = preStepPoint->GetMagneticMoment();
        */
    }

    //以下是拿DetectorConstruction相关参数的方法
    {
        /*
        G4Box *fEnvelopeBox;
        G4LogicalVolume* envLV = G4LogicalVolumeStore::GetInstance()->GetVolume("Envelope");
        if ( envLV ) fEnvelopeBox = dynamic_cast<G4Box*>(envLV->GetSolid());
        fEnvelopeBox->GetXHalfLength()

        const MyDetectorConstruction* detectorConstruction = static_cast<const MyDetectorConstruction*> (G4RunManager::GetRunManager()->GetUserDetectorConstruction());
        */
    }

    //---
    //2. 添加一些判断，并保存对应的数据

    G4double stepLen = aStep->GetStepLength(); //the same as aTrack->GetTrackLength()

    if (parentID == 0) 
    {
        fTrkLen += stepLen;
    }

    /*
    //保存入射粒子产生的切伦科夫光子信息
    if (parentID == 1 && pdgID == 0)
    {
        G4String proName = aTrack->GetCreatorProcess()->GetProcessName();
        if (proName != "Cerenkov")
            return;

        auto *pVolume = postStepPoint->GetTouchableHandle()->GetVolume();
        if (pVolume == NULL)
            return;

        G4LogicalVolume *presentVolume = pVolume->GetLogicalVolume();
        if (presentVolume->GetName() != "FR4BoxVol")
            return;

        G4double optEng = 0.0012398 / aTrack->GetKineticEnergy(); //convert to [nm]
        //G4double optX = postPos.x();
        //G4double optY = postPos.y();
        //G4double optZ = postPos.z();

        double qe = fQE->Interpolate(optEng) / 100.;
        if (G4UniformRand() > qe)
            return;

        SimEvent *fSimEvent = MyAnalysisManager::GetInstance()->GetSimEvent();
        fSimEvent->StoreHit(postPos, optEng);

        
        auto analysisManager = G4AnalysisManager::Instance();
        analysisManager->FillNtupleDColumn(0, 0, optEng);
        analysisManager->FillNtupleDColumn(0, 1, optX);
        analysisManager->FillNtupleDColumn(0, 2, optY);
        analysisManager->FillNtupleDColumn(0, 3, optZ);
        analysisManager->FillNtupleDColumn(0, 4, aTrack->GetVertexPosition().x());
        analysisManager->FillNtupleDColumn(0, 5, aTrack->GetVertexPosition().y());
        analysisManager->FillNtupleDColumn(0, 6, aTrack->GetVertexPosition().z());
        analysisManager->AddNtupleRow(0);
        
    }
    */

    //带电粒子击中计数 - 研究本底计数
    /*
    auto *pVolume = postStepPoint->GetTouchableHandle()->GetVolume();
    if (pVolume == NULL)
        return;

    G4LogicalVolume *presentVolume = pVolume->GetLogicalVolume();
    if (presentVolume->GetName() != "FR4BoxVol") //打到阳极板上的才记录
        return;

    if (!aStep->IsFirstStepInVolume()) //FR4里只有第一个step才保存，避免在FR4里有多次step保存多次的情况
        return;

    G4String proName = postStepPoint->GetProcessDefinedStep()->GetProcessName(); //必须是电离辐射
    G4ProcessType proType = postStepPoint->GetProcessDefinedStep()->GetProcessType();
    G4int proSubType = postStepPoint->GetProcessDefinedStep()->GetProcessSubType();
    //G4cout << "==>"<<proName << G4endl;
    //if (proName != "eIoni")
    //    return;

    //if (aTrack->GetTrackStatus() != fStopAndKill) //只要track停止时的信息
    //    return;

    G4ThreeVector postPos = postStepPoint->GetPosition();

    auto analysisManager = G4AnalysisManager::Instance();
    analysisManager->FillNtupleDColumn(1, 0, postPos.x());
    analysisManager->FillNtupleDColumn(1, 1, postPos.y());
    analysisManager->FillNtupleDColumn(1, 2, postPos.z());
    analysisManager->FillNtupleDColumn(1, 3, aTrack->GetVertexPosition().x());
    analysisManager->FillNtupleDColumn(1, 4, aTrack->GetVertexPosition().y());
    analysisManager->FillNtupleDColumn(1, 5, aTrack->GetVertexPosition().z());
    analysisManager->FillNtupleDColumn(1, 6, double(proType));
    analysisManager->FillNtupleDColumn(1, 7, double(proSubType));
    analysisManager->FillNtupleDColumn(1, 8, double(pdgID));
    analysisManager->FillNtupleDColumn(1, 9, double(parentID));
    analysisManager->AddNtupleRow(1);
    */

   
    return;
}
